// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import frc.robot.AS5600EncoderPwm;
import frc.robot.RobotMap;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import com.ctre.phoenix.motorcontrol.SensorCollection;
import edu.wpi.first.wpilibj.Spark;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Shooter extends Subsystem {
    private static WPI_TalonSRX Turret = new WPI_TalonSRX(RobotMap.TURRET_ADDRESS);
    private static WPI_VictorSPX Shooter = new WPI_VictorSPX(RobotMap.FIRST_SHOOTER_ADDRESS);
    private static WPI_VictorSPX Shooter2 = new WPI_VictorSPX(RobotMap.SECOND_SHOOTER_ADDRESS);
    private final AS5600EncoderPwm encoder = new AS5600EncoderPwm(Turret.getSensorCollection());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Shooter() {
        Turret.configSelectedFeedbackSensor(FeedbackDevice.PulseWidthEncodedPosition);
        Shooter.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Absolute);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        SmartDashboard.putNumber("Turret Encoder", getMeasurement());
        SmartDashboard.putNumber("Shooter Speed", getShooterSpeed());
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    double getShooterSpeed() {
        return Shooter.getSelectedSensorPosition();
    }

    double getMeasurement() {
        return encoder.getPwmPosition();
    }

    public static void moveTurret(boolean moveClockwise, Boolean moveCounterClockwise) {
        if (moveClockwise) {
            Turret.set(RobotMap.TURRET_SPEED);
        }
        else if (moveCounterClockwise){
            Turret.set (-RobotMap.TURRET_SPEED);
        }
        else {
            Turret.set (0);
        }
    }

    public static void shoot(boolean shoot) {
        if (shoot) {
            Shooter.set(0.25);
            Shooter2.set(0.25);
        } else {
            Shooter.set(0);
            Shooter2.set(0);
        }
    }
}